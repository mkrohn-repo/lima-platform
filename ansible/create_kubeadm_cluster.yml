---
- hosts: all
  gather_facts: true
  vars_files:
    - vars.yml
  tasks:
# capture the caller's $HOME (remote, not your laptop)
    - name: Capture remote user's HOME
      ansible.builtin.set_fact:
        kube_home: "{{ ansible_env.HOME }}"
      become: false

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb | int > 0
      become: true

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^.*\sswap\s.*$'
        replace: ''
      become: true

    - name: Load kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
      become: true

    - name: Apply sysctl params
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
      become: true

    - command: sysctl --system
      become: true

    - name: Install deps
      apt:
        name: [apt-transport-https, ca-certificates, curl, gnupg, lsb-release, software-properties-common]
        update_cache: true
      become: true

    - name: Install containerd
      apt:
        name: containerd
        state: present
      become: true

    - name: Ensure /etc/containerd exists
      file:
        path: /etc/containerd
        state: directory
        mode: "0755"
      become: true

    - name: Generate default containerd configuration file
      ansible.builtin.shell: |
        containerd config default | tee /etc/containerd/config.toml >/dev/null
      become: true

    - name: Update SystemdCgroup setting to true in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^            SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backup: yes
      become: true

    - name: Verify the SystemdCgroup setting is true
      ansible.builtin.command:
        cmd: "grep 'SystemdCgroup = true' /etc/containerd/config.toml"
      register: verify_output

    - name: Restart containerd to apply new configuration
      ansible.builtin.systemd:
        name: containerd
        state: restarted
      become: true

    - name: Display verification result
      debug:
        msg: "{{ verify_output.stdout }}"

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'        
      become: true

    - name: Download Kubernetes Release.key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_repo_version }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
      become: true

    - name: Dearmor Kubernetes key to keyring
      ansible.builtin.command:
        cmd: >
          gpg --dearmor
          -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          /etc/apt/keyrings/kubernetes-apt-keyring.asc
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      become: true

    - name: Ensure keyring permissions (world-readable for apt)
      ansible.builtin.file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'
        owner: root
        group: root
      become: true

    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_repo_version }}/deb/ /"
        filename: kubernetes
        state: present
        update_cache: yes
      become: true

    - name: Install kubeadm, kubelet, kubectl
      apt:
        name: [kubelet, kubeadm, kubectl]
        state: present
        update_cache: true
      become: true

    - name: Hold k8s packages
      ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
      ignore_errors: yes     
      become: true

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
      become: true

- hosts: control_plane
  vars_files:
    - vars.yml
  tasks:
    - name: Init control plane
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf
      become: true

    - name: Ensure ~/.kube exists
      ansible.builtin.file:
        path: "{{ kube_home }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid | default(ansible_user_id) }}"
      become: false

    - name: Install kubeconfig
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kube_home }}/.kube/config"
        remote_src: true
        mode: '0644'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid | default(ansible_user_id) }}"
      become: true

    - name: Install Calico network plugin
      shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml  --kubeconfig  /{{ kube_home }}/.kube/config 
      args:
        executable: /bin/bash

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: joincmd
      changed_when: false
      become: true
      delegate_to: k8scp000
      become_method: sudo

    - name: Set join command as a global fact
      set_fact:
        global_join_command: "{{ joincmd.stdout }}"

    - name: Ensure serverTLSBootstrap
      ansible.builtin.lineinfile:
        path: /var/lib/kubelet/config.yaml
        regexp: '^serverTLSBootstrap:'
        line: 'serverTLSBootstrap: true'
        insertafter: EOF
        backup: yes
      become: true

    - name: Restart kubelet to trigger serving CSR
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        enabled: true
      become: true

- hosts: workers
  become: true
  tasks:
    - name: Join worker to cluster
      shell: "{{ hostvars[groups['control_plane'][0]].global_join_command }}"
      args:
        executable: /bin/bash

    - name: Ensure serverTLSBootstrap (worker)
      ansible.builtin.lineinfile:
        path: /var/lib/kubelet/config.yaml
        regexp: '^serverTLSBootstrap:'
        line: 'serverTLSBootstrap: true'
        insertafter: EOF
        backup: yes

    - name: Restart kubelet to trigger serving CSR (worker)
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        enabled: true

- hosts: control_plane
  become: false
  tasks:
    - name: Wait 90 sec for CSRs
      ansible.builtin.pause:
        seconds: 90

    - name: Approve pending kubelet-serving CSRs without any regard to finesse
      ansible.builtin.shell: |
        set -euo pipefail
        for a in `kubectl get csr -o name` ; do kubectl certificate approve  $a; done
      args: { executable: /bin/bash }
